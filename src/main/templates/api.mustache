package {{package}};

import {{modelPackage}}.*;
import {{package}}.{{classname}}Service;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

{{#imports}}import {{import}};
{{/imports}}

import java.util.Map;
import java.util.List;

import java.io.InputStream;

import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.*;
import javax.inject.Inject;

{{#useBeanValidation}}
import javax.validation.constraints.*;
import javax.validation.Valid;
{{/useBeanValidation}}
{{#operations}}{{#operation}}{{#isMultipart}}import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;
{{/isMultipart}}{{/operation}}{{/operations}}
@Path("{{commonPath}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}
//@io.swagger.annotations.Api(description = "the {{{baseName}}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}  {
    @Inject {{classname}}Service service;

{{#operation}}
    @{{httpMethod}}
    {{#subresourceOperation}}@Path("{{{path}}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}
    @Operation(
        summary = "{{{summary}}}",
        description = "{{{notes}}}"{{#hasAuthMethods}},
        authorizations = {
            {{#authMethods}}
            @io.swagger.annotations.Authorization(
                value = "{{name}}"{{#isOAuth}},
                scopes = {
                    {{#scopes}}
                        @io.swagger.annotations.AuthorizationScope(scope = "{{scope}}",
                        description = "{{description}}"){{^-last}},{{/-last}}
                    {{/scopes}}
                }{{/isOAuth}}){{^-last}},{{/-last}}
            {{/authMethods}}
        }{{/hasAuthMethods}})
    @APIResponses(
        value = {
        {{#responses}}
            @APIResponse(
                responseCode = "{{{code}}}",
                description = "{{{message}}}",
                content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = {{{baseType}}}.class))){{^-last}},{{/-last}}
        {{/responses}} })
    public Response {{nickname}}(
            {{#isMultipart}}MultipartFormDataInput input,{{/isMultipart}}
            {{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{^isMultipart}}{{>formParams}},{{/isMultipart}}{{#isMultipart}}{{^isFormParam}},{{/isFormParam}}{{/isMultipart}}
            {{/allParams}}@Context SecurityContext securityContext)
    {
        return service.{{nickname}}(
            {{#isMultipart}}input,{{/isMultipart}}
            {{#allParams}}{{^isMultipart}}{{paramName}},{{/isMultipart}}{{#isMultipart}}{{^isFormParam}}{{paramName}},{{/isFormParam}}{{/isMultipart}}{{/allParams}}
            securityContext);
    }
{{/operation}}
}
{{/operations}}
